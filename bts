#!/usr/bin/env bash
set -Eeuo pipefail

BTS_APP_ID=${0##*/}
export BTS_APP_ID=${BTS_APP_ID%.*[Ss][Hh]}
export BTS_APP_DIR="${0%/*}"

bts_L() {
  echo -e "$(date +"%m/%d %H:%M:%S") ${BTS_APP_ID} $@"
}
export -f bts_L

bts_T() {
  bts_L "\033[2;90mtrace\033[0m" "$@"
}
export -f bts_T

bts_D() {
  bts_L "\033[1;90mdebug\033[0m" "$@"
}
export -f bts_D

#bts_V() {
#  bts_L "\033[1;97minfo \033[0m" "$@"
#}
#export -f bts_V

bts_I() {
  bts_L "\033[1;97minfo \033[0m" "$@"
}
export -f bts_I

bts_N() {
  bts_L "\033[1;36mnote \033[0m" "$@"
}
export -f bts_N

bts_W() {
  bts_L "\033[0;35mwarn \033[0m" "$@"
}
export -f bts_W

bts_E() {
  bts_L "\033[0;31mERROR\033[0m" "$@" >&2
}
export -f bts_E

bts_F() {
  local BTS_RC=${BTS_RC:-255}
  local MESSAGE_PREFIX_=
  if [ "${BTS_STEP_ID:-}" ]; then
    MESSAGE_PREFIX_+="(step ${BTS_STEP_ID}) "
    BTS_STEP_ID=$(( ${BTS_STEP_ID} - 1 ))
  fi
  bts_L "\033[1;41;97mFATAL\033[0m ${MESSAGE_PREFIX_}$@" >&2
  exit ${BTS_RC}
}
export -f bts_F

#
# Recipe file name can be passed as follows: 
# * As BTS_RECIPE env
#   or
# * As 1st positional argument
[ -z "${BTS_RECIPE:-}" -a $# -gt 0 ] \
  && BTS_RECIPE="$1" && shift

BTS_RECIPE_DEFAULT="${BTS_APP_ID}recipe"
#
# If neither of above provided, defaults will be tried:
# * "${BTS_RECIPE_DEFAULT}" or ".${BTS_RECIPE_DEFAULT}" in current directory
# * "${BTS_RECIPE_DEFAULT}" or ".${BTS_RECIPE_DEFAULT}" in BTS directory "${BTS_APP_DIR}"
#
# Find recipe - internal
#
bts_search_recipe_()
{
  local d_
  for d_ in "$@"
  do
    local r_
    for r_ in "${BTS_RECIPE_DEFAULT}" ".${BTS_RECIPE_DEFAULT}"
    do
      r_="${d_:+${d_}/}${r_}"
      [ -e "${r_}" ] && echo "${r_}" && return
    done
  done
}

#
# If BTS_RECIPE points to directory, we search for recipe file in it
#
[ -d "${BTS_RECIPE}" ] \
  && bts_I "\"${BTS_RECIPE}\" is directory, searching recipe in it.." \
  && BTS_RECIPE_SEARCH_DIR_="${BTS_RECIPE}" \
  && BTS_RECIPE=$(bts_search_recipe_ "${BTS_RECIPE_SEARCH_DIR_}") \
  && [ "${BTS_RECIPE}" ] && bts_I "Found recipe \"${BTS_RECIPE}\"" \
  || true

#
# Last attempt to detect in
#
[ -z "${BTS_RECIPE}" ] \
  && bts_D "Recipe not provided, checking defaults.." \
  && BTS_RECIPE=$(bts_search_recipe_ "" "${PWD}/" "${BTS_APP_DIR}/") \
  && [ "${BTS_RECIPE}" ] && bts_I "Found recipe \"${BTS_RECIPE}\"" \
  || true

[ -z "${BTS_RECIPE}" ] \
  && bts_F "Usage error
Recipe file not specified, default not found.
Please provide recipe file:

* as BTS_RECIPE env var
  or
* as 1st positional argument
  or
* as "${BTS_RECIPE_DEFAULT}" or ".${BTS_RECIPE_DEFAULT}" in current directory
  or
* as "${BTS_RECIPE_DEFAULT}" or ".${BTS_RECIPE_DEFAULT}" in BTS directory ("${BTS_APP_DIR}")
"
#
# Recipe dir might contain patches etc
#
BTS_RECIPE_DIR=${BTS_RECIPE%/*}
BTS_RECIPE_DIR=${BTS_RECIPE_DIR%%/}
[ "${BTS_RECIPE_DIR}" -ef "${BTS_RECIPE}" ] \
  && BTS_RECIPE_DIR=.
#
# Recipe base name used for log file name
#
BTS_JOB_NAME=${BTS_JOB_NAME:-$(sed -Ee 's,[\._\-]?(bts[\._\-]?)?recipe$,,i' <<< "${BTS_RECIPE##*/}")}
[ "${BTS_JOB_NAME}" ] || BTS_JOB_NAME=$(basename "${BTS_RECIPE%/*}")
[ "${BTS_JOB_NAME}" ] || bts_F "Fail to determine job name, please set with BTS_JOB_NAME"
#
# Exec self to self + log
#
BTS_APP_WRAPPED_=${BTS_APP_WRAPPED_:-}
if [ -z "${BTS_APP_WRAPPED_}" ]
then
  exec \
    env \
      BTS_APP_WRAPPED_=1 \
      BTS_RECIPE="${BTS_RECIPE}" \
      bash \
        -Eeuo pipefail \
        -c "\"$0\" \"$@\" 2>&1 | tee -a '${BTS_APP_ID}-${BTS_JOB_NAME}.log'"
  BTS_RC=$? \
    bts_F "\`exec\` returned ${BTS_RC}"
fi
#
# Script is exec'uting with STDOUT and STDERR redirected to log.
#
################################################################
#
# Real job starts here.
#
bts_D "Start pid=$$"
bts_I "Job name ${BTS_JOB_NAME}"
bts_D "recipe '${BTS_RECIPE}', dir '${BTS_RECIPE_DIR}'"

# Doesn't work
#exec 3>&1 4>&2
#trap 'exec 2>&4 1>&3' 0 1 2 3
#exec 1 2>&1 | tee "${BTS_APP_ID}"-$(date +%y%m%d-%H%M%S).log

#
# NB: OS-specific
#
BTS_ARCH=$(uname -m)
BTS_ARCH_SUFFIX=
[ "${BTS_ARCH}" = "x86_64" -o "${BTS_ARCH}" = "amd64" ] \
  && BTS_ARCH_SUFFIX="64" \
  || BTS_ARCH_SUFFIX=""
export BTS_ARCH_SUFFIX

#
# Number of CPUs
#
BTS_NCPUS=$(nproc)
BTS_NJOBS_DEFAULT=$(( ${BTS_NCPUS} / 2 ))
export BTS_NJOBS=${BTS_NJOBS:-${BTS_NJOBS_DEFAULT}}

# Init routines for various platforms

# NB: OS-specific
# Runtime properties
Platform=
Platform_EL=
case ${OSTYPE} in
[Mm][Ss][Yy][Ss])
	Platform=msys
	;;
[Cc][Yy][Gg][Ww][Ii][Nn])
	Platform=cygwin
	;;
[Ll][Ii][Nn][Uu][Xx]*)
	if [ -f "/etc/redhat-release" ]
	then
	    Platform="rh"
		Platform_EL=EL$(cat /etc/redhat-release | perl -pe 's,.*?(\d).*,$1,')
    bts_D "Detected platform ${Platform} ${Platform_EL}"
	else
		bts_F "Unsupported OS family ${OSTYPE}"
	fi
	;;
*)
	bts_F "Unsupported OS ${OSTYPE}"
	;;
esac


bts_init()
{
	BTS_ROOT=${BTS_ROOT:-$1}
	[ "${BTS_ROOT}" ] || bts_F "BTS_ROOT is not defined"
	export BTS_ROOT
  # Default dir for built programs
	export BTS_BIN_DIR="${BTS_ROOT}/bin"
	[ -d "${BTS_BIN_DIR}" ] || mkdir -p "${BTS_BIN_DIR}"
	# Default dir for built superuser programs
	export BTS_SBIN_DIR="${BTS_ROOT}/sbin"
	[ -d "${BTS_SBIN_DIR}" ] || mkdir -p "${BTS_SBIN_DIR}"
	# Default dir for built libraries
	export BTS_LIB_DIR_NAME="lib${BTS_ARCH_SUFFIX}"
	export BTS_LIB_DIR="${BTS_ROOT}/${BTS_LIB_DIR_NAME}"
	[ -d "${BTS_LIB_DIR}" ] || mkdir -p "${BTS_LIB_DIR}"
	# Default dir for headers
	export BTS_INCLUDE_DIR="${BTS_ROOT}/include"
	[ -d "${BTS_INCLUDE_DIR}" ] || mkdir -p "${BTS_INCLUDE_DIR}"
	# Top dir for source and build dirs
	export BTS_WORK_DIR=${BTS_WORK_DIR:-"${BTS_ROOT}/.${BTS_APP_ID}"}
	[ -e "${BTS_WORK_DIR}" ] || mkdir -p "${BTS_WORK_DIR}"
	(pushd . >/dev/null 2>&1; cd "${BTS_WORK_DIR}" ; popd >/dev/null 2>&1)
	# Conf dir, now storing only profile
#	export BTS_CONF_DIR="${BTS_WORK_DIR}/etc"
#	[ -d "${BTS_CONF_DIR}" ] || mkdir -p "${BTS_CONF_DIR}"
    # Environment vars used by builds
	export BTS_PROFILE=${BTS_PROFILE:-"${BTS_ROOT}/enable"}
	[ "${Platform}" = "rh" -a $(id -u) -ne 0 ] && BTS_SUDO="sudo "
	# Directory with extras (e.g. patches)
	export BTS_RECIPE_DIR="${BTS_RECIPE%/*}"
	[ "${BTS_RECIPE_DIR}" ] || BTS_RECIPE_DIR="${PWD}"
cat<<EOF >&2
Toolchain tree defined:
Prefix:        ${BTS_ROOT}
Library path:  ${BTS_LIB_DIR}
Includes path: ${BTS_INCLUDE_DIR}
BTS path:      ${BTS_WORK_DIR}
BTS profile:   ${BTS_PROFILE}
EOF
	# Initialize step id
	BTS_STEP_ID=0
	BUILD_STEP_FILE=
	#
	BTS_SUDO=${BTS_SUDO:-}
	export BTS_CMAKE_PREFIX_PATH=${BTS_CMAKE_PREFIX_PATH:-}
	#
	TAG=
  ARCHIEVED_DIR=
  BTS_GET_DIR=
  LOCAL_REPO=
  SCHEME=
  # Inform external world  that we're not ready
	touch "${BTS_ROOT}/.disabled"
}
export -f bts_init


#
# Remove [blank-separated] paths from BTS_CLEAN_LIST
#
bts_clean()
{
    if [ "${BTS_CLEAN_LIST:-}" ]
    then
        bts_T "Clean ${BTS_CLEAN_LIST}"
        rm -rf ${BTS_CLEAN_LIST:-}
        BTS_CLEAN_LIST=
    fi
}
export -f bts_clean


bts_end()
{
    local LAST_RC_=$?
    bts_D "
    LAST_RC_    ${LAST_RC_}
    BTS_STEP_ID ${BTS_STEP_ID:-}
    BUILD_STEP_FILE ${BUILD_STEP_FILE:-}
    "
	if [ ${LAST_RC_} -eq 0 \
	  -a "${BTS_STEP_ID:-}" -a ${BTS_STEP_ID:--1} -gt 0 \
	  -a "${BUILD_STEP_FILE:-}" -a ! -f "${BUILD_STEP_FILE:-}" \
	  ]
	then
		cd "${BTS_WORK_DIR}"
		touch "${BUILD_STEP_FILE}"
		bts_clean
        bts_N "Done"
    else
        bts_E "Step '${BTS_STEP_ID:--}' returned ${LAST_RC_}"
	fi
	if [ "${BTS_ROOT:-}" -a -e "${BTS_ROOT:-}" ]
	then
    rm -f "${BTS_ROOT}/.disabled"
    date +%s > "${BTS_ROOT}/.updated"
  fi
  return ${LAST_RC_}
}
trap bts_end EXIT ERR


# NB: OS-specific
bts_pkg()
{
	case "${Platform}" in
	rh)
	  if [ "${Platform_EL}" = "EL8" ]
	  then
		  ${BTS_SUDO} dnf -y "$@"
		elif [ "${Platform_EL}" = "EL7" ]
		then
		  ${BTS_SUDO} yum -y "$@"
		else
		  bts_F "Unsupported platform '${Platform}' version '${Platform_EL}'"
		fi
		;;
  cygwin)
    if ! command -v apt-cyg >/dev/null 2>&1
    then
      bts_N "apt-cyg missing"
      curl -nOL https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg
      if [ ! -d ~/exec ]
      then
        mkdir ~/exec
        export PATH=~/exec:${PATH}
      fi
      install apt-cyg ~/exec
      bts_N "apt-cyg installed as $(command -v apt-cyg)"
    fi
    apt-cyg "$@"
    ;;
	msys)
		local a="$1"
		shift
		case "${a}" in
		[Ii][Nn][Ss][Tt][Aa][Ll][Ll])
			pacman -S --needed --noconfirm "$@"
			;;
		*)
			bts_F "Command '${a}' not supported"
			;;
		esac
		;;
	esac
}
export -f bts_pkg


bts_env()
{
	(
#	  set -x
	  [ ! -f "${BTS_PROFILE}" ] || source "${BTS_PROFILE}"
#	  env | egrep '^\S' | egrep '^BTS|PATH|FLAGS' | sort
#	  bts_F "AAA"
	  command "$@"
  )
  local rc_=$?
  : || bts_D "Command:
  \"$@\"
returned ${rc_}
  "
  return ${rc_}
}
export -f bts_env


bts_configure()
{
  local prefix_=${BTS_CONFIGURE_ROOT:-"${BTS_ROOT}"}
  local libdir_=${BTS_CONFIGURE_LIBDIR:-${BTS_CONFIGURE_ROOT:+"${BTS_CONFIGURE_ROOT}/${BTS_LIB_DIR_NAME}"}}
  [ "${libdir_}" ] || libdir_="${BTS_LIB_DIR}"
	bts_env ${BTS_CONFIGURE_DIR:-.}/configure --prefix="${prefix_}" --libdir="${libdir_}" "$@"
}
export -f bts_configure


bts_make()
{
	bts_env make -j${BTS_NJOBS} "$@"
}
export -f bts_make


BTS_DEFAULT_BUILD_TYPE="Release"
bts_cmake()
{
  local GENERATOR_="Ninja Multi-Config"
  local DASH_G_
  DASH_G_=-G"${GENERATOR_}"
  bts_N "Use '${GENERATOR_}'"
#  bts_D "Command: cmake -G\"${GENERATOR_}\" -DCMAKE_INSTALL_PREFIX=\"${BTS_ROOT}\" -DCMAKE_PREFIX_PATH=\"${BTS_ROOT};${BTS_CMAKE_PREFIX_PATH}\" \"$@\""
  BTS_PROFILE="${BTS_PROFILE}" \
	bts_env cmake \
	  -G"${GENERATOR_}" \
	  -DBUILD_TYPE="${BTS_BUILD_TYPE:-${BTS_DEFAULT_BUILD_TYPE}}" \
	  -DCMAKE_BUILD_TYPE="${BTS_BUILD_TYPE:-${BTS_DEFAULT_BUILD_TYPE}}" \
	  -DCMAKE_INSTALL_PREFIX=${BTS_CMAKE_INSTALL_PREFIX:-"${BTS_ROOT}"} \
	  -DCMAKE_PREFIX_PATH="${BTS_ROOT}${BTS_CMAKE_PREFIX_PATH:+;${BTS_CMAKE_PREFIX_PATH}}" \
	  "$@"
}
export -f bts_cmake


bts_cmake_build_install()
{
  bts_env cmake --build . -j${BTS_NJOBS} --config="${BTS_BUILD_TYPE:-${BTS_DEFAULT_BUILD_TYPE}}" --target install${BTS_CMAKE_INSTALL_TYPE:-"/strip"}
}
export -f bts_cmake_build_install


bts_step()
{
	[ -d "${BTS_WORK_DIR}" ] || mkdir -p "${BTS_WORK_DIR}"
	cd "${BTS_WORK_DIR}"
#	echo "  * Changed to ${PWD}"

    #
    # Set previous step as done
    #
	if [ "${BTS_STEP_ID}" -gt 0 -a ! -f "${BUILD_STEP_FILE}" ]
	then
		touch "${BUILD_STEP_FILE}"
		bts_clean
		bts_I "Done"
	fi

	BTS_STEP_ID=$(( ${BTS_STEP_ID} + 1 ))
	local BUILD_STEP_DESC_=${BTS_STEP_DESC:-"$1"}
	[ "${BUILD_STEP_DESC_}" ] || bts_F "Required BTS_STEP_DESC missing!"

    BTS_STEP_TAG=$(
	        perl -pe '
	            s,^\s*(install|create)\b\W*,,i ;
	            s,[^\w\.]+,-,gi; s,^\-|\-$,,g ;
	            $_ = lc ;
	            ' \
	            <<< "${BUILD_STEP_DESC_}"
	        )
	bts_T "step tag ${BTS_STEP_TAG}"
	BUILD_STEP_FILE=".${BTS_APP_ID}.${BTS_STEP_TAG}"

	bts_N "${BTS_STEP_ID} ${BUILD_STEP_DESC_}"
	if [ -f "${BUILD_STEP_FILE}" ]
	then
		bts_I "Skip [already done]"
		return 1
	fi

	TAG=
	ARCHIEVED_DIR=
	BTS_GET_DIR=
	LOCAL_REPO=
	SCHEME=

	BTS_CURRENT_SOURCE_DIR=
	BTS_CURRENT_BUILD_DIR=

	return 0
}
export -f bts_step


bts_build_dir()
{
	BTS_CURRENT_SOURCE_DIR="${PWD}"
	if [ "${BTS_BUILD_DIR:-}" ]
	then
	    BTS_CURRENT_BUILD_DIR=${BTS_BUILD_DIR}/.${BTS_APP_ID}${BTS_STEP_TAG:+.${BTS_STEP_TAG}}.${PWD##*/}.build
	else
	    BTS_CURRENT_BUILD_DIR=${BTS_CURRENT_SOURCE_DIR}.build
	fi
	bts_T "build_dir ${BTS_CURRENT_BUILD_DIR}"
	[ -d "${BTS_CURRENT_BUILD_DIR}" ] || mkdir -p "${BTS_CURRENT_BUILD_DIR}"
	cd "${BTS_CURRENT_BUILD_DIR}"
	[ "${BTS_NO_CLEAN:-}" ] || BTS_CLEAN_LIST=${BTS_CLEAN_LIST:+"${BTS_CLEAN_LIST} "}"${PWD}"
	bts_D "In ${PWD}"
}
export -f bts_build_dir


bts_untar()
{
    local FILE_
    [ "$1" = "-" ] && FILE_=${BTS_UNTAR_FILE:-} || FILE_="$1"
    local ARGS_="x"
    if egrep -iqs 'xz$' <<< "${FILE_}" ; then
        ARGS_+="J"
    elif egrep -iqs 'gz$' <<< "${FILE_}" ; then
        ARGS_+="z"
    elif egrep -iqs 'bz2?$' <<< "${FILE_}" ; then
        ARGS_+="j"
    fi
    bts_env tar ${ARGS_}f "$@"
}
export -f bts_untar


bts_unzip()
{
  bts_env unzip "$@"
}
export -f bts_unzip


bts_fetch()
{
    local destination="$1"
    shift
    local source="$1"
    shift
    if [ "${BTS_GET_HELPER:-}" ]
    then
        bts_env curl -#knL -o "${destination}" -H"BTS-Get-URL: ${source}" "${BTS_GET_HELPER:-}"
    else
        bts_env curl -#knL -o "${destination}" "${source}"
    fi
}
export -f bts_fetch


bts_get()
{
	local url="$1"
	shift
	bts_T "get ${url}"
	# Many URL end with source code archive file
	# In other cases "file" would be repository name
	local file="${url}"
	# Hack against sourceforge /download URLs
	file=${file%/download}
	# Leave only trailing component
	file=${file##*/}
	# Drop query string
	file=$(perl -pe 's,[?&].*$,,' <<< "${file}")
	bts_T "get assume result '${file}'"
	# For CVS repo passed as separate arg
	local dir
	# bts_extract_dir
	local BTS_EXTRACT_DIR=${BTS_EXTRACT_DIR:-}
	local BTS_NOCD=${BTS_NOCD:-}

	# Often name of downloaded file can be derived from URL.
	# Unfortunately this is not always the case.
	# To be positive about the name of downloaded file
	# one fetch files to dir with "unique" name.
	local BTS_GET_DIR_=${BTS_GET_DIR:-${BTS_WORK_DIR}}
#	local BTS_GET_LIST_="${BTS_GET_DIR_}/.bts-get.list"
#	local BTS_GET_SOURCE_DIGEST=$(openssl dgst -sha224 <<< "${url}" | cut -f2 -d' ')
#	egrep -iqs "^${BTS_GET_SOURCE_DIGEST}\\b" "${BTS_GET_LIST_}" \
#	        || echo "${BTS_GET_SOURCE_DIGEST} ${url}" >> "${BTS_GET_LIST_}"
	local BTS_GET_CURRENT_DOWNLOAD_DIR=${BTS_GET_DIR_}/.${BTS_APP_ID}${BTS_STEP_TAG:+.${BTS_STEP_TAG}}${file:+.${file}}
	[ -d "${BTS_GET_CURRENT_DOWNLOAD_DIR}" ] || mkdir -p "${BTS_GET_CURRENT_DOWNLOAD_DIR}"
	pushd . >/dev/null 2>&1
	cd "${BTS_GET_CURRENT_DOWNLOAD_DIR}"
	bts_T "get in '${PWD}'"
	[ "${BTS_NO_CLEAN:-}" ] || BTS_CLEAN_LIST=${BTS_CLEAN_LIST:+"${BTS_CLEAN_LIST} "}"${PWD}"

    # TODO: rework
	if [ "${SCHEME}" = "git" ] || egrep -iqs '\.(git)$' <<< "${file}"
	then
		dir=$(sed -e 's,\.git$,,i' <<< "${file}")
		local opt_ref_=
		if [ "${TAG:-}" ]
		then
            dir="${dir}-${TAG}"
            opt_ref_="-b${TAG}"
		fi
		[ -d "${dir}" ] || git clone --depth 1 ${opt_ref_} --recurse-submodules "$@" "${url}" "${dir}"
		cd "${dir}"
	elif [ "${SCHEME}" = "svn" ] || egrep -iqs '^svn://' <<< "${url}"
	then
	    #
	    # Not really supporting SVN
	    #
		local SCHEME="svn"
		[ "${LOCAL_REPO}" ] || bts_F "Schema ${SCHEME} requires LOCAL_REPO to be set"
		dir="${LOCAL_REPO}"
		[ -d "${dir}" ] || svn co "${url}" "${LOCAL_REPO}"
		cd "${dir}"
	elif [ "${SCHEME}" = "cvs" ] || egrep -iqs '^cvs:/*' <<< "${url}"
	then
	    #
	    # Not really supporting CVS
	    #
		local SCHEME="cvs"
		local repo="${1:-}"
        shift
		local url_=$(sed -e 's,^cvs:/*,,i' <<< "${url}")
		# Todo: checkout to dir passed with LOCAL_REPO if specified
		[ "${repo}" ] || bts_F "Schema ${SCHEME} requires repository name passed as last arg"
		dir="${repo}"
		local cmd="cvs -z3 -d ${url_} co"
		[ "${TAG}" ] && cmd+=" -r ${TAG}"
		cmd+=" ${repo}"
		[ -d "${dir}" ] || ${cmd}
		cd "${dir}"
	elif [ "${SCHEME}" = "rsync" ] ### Invent scheme for rsync ?? || echo "${url}" | egrep -iqs '^cvs:/*'
    then
        #
        # Not really supporting RSYNC
        #
        local url_="${url}"
        dir="${url_##*/}"
        local cmd="rsync -az ${url_}"
        cmd="${cmd} ${repo:-.}"
        [ -z "${BTS_GET_FORCE:-}" -a -d "${dir}" ] || ${cmd}
        cd "${dir}"
	else
	    #
	    # Fetch with CURL and extract
	    #
        local archive_type_
        local extract_fn_
        if egrep -iqs '\.(tar|t(ar\.)?(gz|bz2?|xz))$' <<< "${file}"
        then
            archive_type_="tar"
            extract_fn_="bts_untar"
            dir=$(echo "${file}" | perl -pe 's,\.(tar|t(ar\.)?(gz|bz2?|xz))$,,i')
        elif egrep -iqs '\.zip$' <<< "${file}"
        then
            archive_type_="zip"
            extract_fn_="bts_unzip"
            dir=$(sed -Ee 's,\.zip$,,i' <<< "${file}")
        else
			bts_T "get '${file}' doesn't look as archive, fetch without extracting"
		fi
        # Archived directory can be overridden
        [ "${ARCHIEVED_DIR:-}" ] && dir="${ARCHIEVED_DIR}" || :
        # Fetch file
		[ -f "${file}" ] || bts_fetch "${file}" "${url}"
        # Extract file
        if [ "${BTS_GET_DIR:-}" ]
        then
            [ -d "${BTS_GET_DIR}" ] || mkdir -p "${BTS_GET_DIR}"
            cd "${BTS_GET_DIR}"
            ${extract_fn_} "${BTS_WORK_DIR}/${file}"
        elif [ "${extract_fn_:-}" ]
        then
            ${extract_fn_} "${file}"
        fi
        #
        # Downloaded and extracted
        #
        if [ "${BTS_NOCD:-}" ]
        then
            bts_T "get not changing to extracted directory: BTS_NOCD=${BTS_NOCD}"
        elif [ "${BTS_EXTRACT_DIR}" -a -d "${BTS_EXTRACT_DIR}" ]
        then
            cd "${BTS_EXTRACT_DIR}"
	        bts_D "Changed to extracted directory ${PWD}"
        elif [ "${dir:-}" -a -d "${dir:-}" ]
        then
            cd "${dir}"
	        bts_D "Changed to ${PWD}"
	    else
	        bts_T "get can't assume dir to change to, stay in ${PWD}"
        fi
	fi
}
export -f bts_get

bts_I "Start"
source "${BTS_RECIPE}"